{"version":3,"sources":["GLHeatmap.tsx","SoundPrint.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GLHeatmap","connect","state","viewTransform","dispatch","connector","texture","size","ref","React","useRef","useState","THREE","antialias","alpha","renderer","scene","mesh","setMesh","useEffect","current","appendChild","domElement","geometry","material","color","groundMaterial","map","side","position","y","x","z","add","w","width","h","height","setPixelRatio","window","devicePixelRatio","setSize","camera","lookAt","centerX","centerY","zoom","updateProjectionMatrix","render","e","style","SoundPrint","hover","hoverState","setHover","setHoverState","vectors","aggregate","length","List","sx","justifyContent","flexGrow","overflowY","vec","i","ListItem","onMouseLeave","pause","onMouseOver","play","el","controls","autoPlay","src","__meta__","meshIndex","DATASETCONFIG","display","path","type","DatasetType","Chess","Experiments_Only","SoundPlugin","scale","header","this","hasLayout","PSEPlugin","PluginRegistry","getInstance","registerPlugin","CIMEApp","api","API","rootReducer","context","store","setDatasetEntriesAction","config","preselect","url","overrideComponents","layers","order","component","load","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c3d4093e.chunk.js","sourcesContent":["import { RootState } from \"projection-space-explorer\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport * as THREE from 'three'\n\n\nconst mapStateToProps = (state: RootState) => ({\n    viewTransform: state.viewTransform\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n})\n\n\n\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & {\n    /**\n     * THREE texture\n     */\n    texture: THREE.Texture\n\n    /**\n     * World coordinate size\n     */\n    size: {\n        x: number\n        y: number\n        width: number\n        height: number\n    }\n}\n\n\nexport const GLHeatmap = connector(({ viewTransform, texture, size }: Props) => {\n    const ref = React.useRef<any>()\n\n    const [renderer] = useState(() => new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n    }))\n    const [scene] = useState(() => new THREE.Scene())\n    const [mesh, setMesh] = useState<THREE.Mesh>(new THREE.Mesh())\n\n    \n\n    useEffect(() => {\n        ref.current.appendChild(renderer.domElement);\n\n        var geometry = new THREE.BoxGeometry(16, 16, 16);\n        var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n\n        var groundMaterial = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n\n\n        var mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(100, 100), groundMaterial);\n        mesh.position.y = size.x;\n        mesh.position.x = size.y;\n        mesh.position.z = 0.0;\n\n        const cube = new THREE.Mesh(geometry, material);\n        scene.add(mesh);\n\n        setMesh(mesh)\n    }, [])\n\n    useEffect(() => {\n\n    }, [texture])\n\n    useEffect(() => {\n        if (viewTransform) {\n            const w = viewTransform.width\n            const h = viewTransform.height\n\n            renderer.setPixelRatio(window.devicePixelRatio);\n            renderer.setSize(w, h)\n\n            // Create orthographic camera\n            var camera = new THREE.OrthographicCamera(w / - 2, w / 2, h / 2, h / - 2, 1, 1000);\n\n            camera.position.z = 100;\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n            camera.position.x = viewTransform.centerX\n            camera.position.y = viewTransform.centerY\n            camera.zoom = viewTransform.zoom\n\n            camera.updateProjectionMatrix();\n\n            try {\n                renderer.render(scene, camera);\n            } catch (e) {\n\n            }\n        }\n\n    }, [viewTransform, mesh])\n\n    return <div style={{  }} ref={ref} />\n})","import { List, ListItem } from \"@mui/material\"\nimport { IVector, RootState, setHoverState } from \"projection-space-explorer\"\nimport { useRef } from \"react\"\nimport { connect, ConnectedProps } from \"react-redux\"\n\n\nconst mapStateToProps = (state: RootState) => ({\n    hover: state.hoverState\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    setHover: (hover: any) => dispatch(setHoverState(hover, 'soundfingerprint'))\n})\n\n\n\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & {\n    vectors: IVector[]\n    aggregate: boolean\n}\n\n\n\n\nexport const SoundPrint = connector(({ vectors, aggregate, hover, setHover }: Props) => {\n    const ref = useRef<HTMLAudioElement[]>([])\n\n\n    if (vectors?.length) {\n        const onMouseOver = (i: number) => {\n            setHover(vectors[i])\n            ref.current[i].play()\n        }\n\n        const onMouseLeave = (i: number) => {\n            setHover(null)\n            ref.current[i].pause()\n        }\n\n        return <List sx={{\n            '& audio': {\n                width: 250\n            },\n            '& MuiListItem-root': {\n                justifyContent: 'center'\n            },\n            flexGrow: 1,\n            overflowY: 'auto'\n\n        }}>\n            {\n                vectors.map((vec, i) => {\n                    return <ListItem onMouseLeave={() => onMouseLeave(i)} onMouseOver={() => onMouseOver(i)} key={vec.__meta__.meshIndex}>\n                        <audio ref={el => ref.current[i] = el!} controls autoPlay={!aggregate}>\n                            <source src={`data:audio/wav;base64,${(vec as any)['wav']}`} />\n                        </audio>\n                    </ListItem>\n                })\n            }\n        </List>\n    }\n\n    return <div>none</div>\n})","import React, { Ref, useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { API, Application, DatasetType, IVector, PluginRegistry, PSEContextProvider, PSEPlugin, rootReducer, RootState, setDatasetEntriesAction } from 'projection-space-explorer';\nimport * as THREE from 'three'\nimport { GLHeatmap } from './GLHeatmap';\nimport { List, ListItem } from '@mui/material';\nimport { SoundPrint } from './SoundPrint';\n\n\nexport const DATASETCONFIG = [\n  {\n    display: \"chess\",\n    path: \"chess16k.csv\",\n    type: DatasetType.Chess\n\n  },\n  {\n    display: \"Cycle 0\",\n    path: \"/jku-vds-lab/reaction-cime/datasets/reaction_optimization/no_suggestions/experiments_0.csv\",\n    type: DatasetType.Experiments_Only\n  },\n  {\n    display: \"Cycle 1\",\n    path: \"/jku-vds-lab/reaction-cime/datasets/reaction_optimization/no_suggestions/experiments_1.csv\",\n    type: DatasetType.Experiments_Only\n  },\n  {\n    display: \"Cycle 2\",\n    path: \"/jku-vds-lab/reaction-cime/datasets/reaction_optimization/no_suggestions/experiments_2.csv\",\n    type: DatasetType.Experiments_Only\n  },\n  {\n    display: \"Cycle 3\",\n    path: \"/jku-vds-lab/reaction-cime/datasets/reaction_optimization/no_suggestions/experiments_3.csv\",\n    type: DatasetType.Experiments_Only\n  }\n]\n\n\n\n\n\n\n\nclass SoundPlugin extends PSEPlugin {\n  type = 'sound'\n\n  createFingerprint(vectors: IVector[], scale: number, aggregate: boolean): JSX.Element {\n    return <SoundPrint vectors={vectors} aggregate={aggregate}></SoundPrint>\n  }\n\n  hasFileLayout(header: string[]) {\n    return this.hasLayout(header, ['wav', 'stft'])\n  }\n}\n\nPluginRegistry.getInstance().registerPlugin(new SoundPlugin())\n\n\n\n\nexport function CIMEApp() {\n  const api = //@ts-ignore\n    new API<RootState>(null, rootReducer)\n\n  const [context] = useState(\n    api\n  );\n\n\n  api.store.dispatch(setDatasetEntriesAction(DATASETCONFIG))\n\n  return (\n    <PSEContextProvider context={context}>\n      <Application\n        config={{\n          preselect: {\n            url: 'chess16k.csv'\n          }\n        }}\n        overrideComponents={{\n          layers: [{\n            order: -1,\n            component: () => <GLHeatmap\n              texture={new THREE.TextureLoader().load('test.jpg')}\n              size={{\n                x: 10,\n                y: 10,\n                width: 100,\n                height: 100\n              }}\n            ></GLHeatmap>\n          }]\n        }}\n      />\n    </PSEContextProvider>\n  );\n}\n\nexport default CIMEApp;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CIMEApp from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <CIMEApp />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}